<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mappers.PlaylistMapper">
    <select id="getUserPlaylistAndRatingsOfUser" resultType="map">
        <![CDATA[
            select distinct a.song_id, a.artist, a.song_name, ifnull(b.rating, 0) "rating"
            from (select song_id, artist, song_name from playlist
                  where song_id = #{item_id}) a
                     left outer join (select artist, song_name, rating from playlist, user_rating
                                      where user_id = #{user_id} and item_id = #{item_id}) b
                         on a.artist = b.artist and a.song_name = b.song_name
        ]]>
    </select>

    <select id="getPlaylistAndRatingsByKeywordOfUser" resultType="map">
        <![CDATA[
            select distinct a.song_id, a.artist, a.song_name, ifnull(b.rating, 0) "rating"
            from (select song_id, artist, song_name from playlist
                  where artist like "%${keyword}%" or song_name like "%${keyword}%") a
                     left outer join (select item_id, rating from user_rating
                                      where user_id = #{username}) b on a.song_id = b.item_id
        ]]>
    </select>

    <select id="getCurrentStorePlaylist" resultType="map">
        <![CDATA[
            select playlist.song_id, artist, song_name
            from playlist, current_playlist, store
            where playlist.song_id = current_playlist.song_id
            and store.store_id = current_playlist.store_id
            and store.store_id = #{store_id}
        ]]>
    </select>

    <select id="getCurrentStorePlaylistAndRatingsOfUser" resultType="map">
        <![CDATA[
            select distinct a.song_id, a.artist, a.song_name, ifnull(b.rating, 0) "rating"
            from (select playlist.song_id, artist, song_name from playlist, current_playlist
                  where playlist.song_id = current_playlist.song_id and current_playlist.store_id = #{store_id}) a
                     left outer join (select artist, song_name, rating from playlist, user_rating
                                      where user_id = #{user_id} and playlist.song_id = user_rating.item_id) b
                                     on a.artist = b.artist and a.song_name = b.song_name
        ]]>
    </select>

    <select id="getPlaylistByKeyword" resultType="map">
        <![CDATA[
            select distinct song_id, artist, song_name from playlist
            where artist like "%${keyword}%" or song_name like "%${keyword}%"
        ]]>
    </select>

    <select id="getSongsByAgeGender" resultType="int">
        <![CDATA[
            select song_id from playlist
            where prefer_age_flag = #{age}
              and prefer_gender_flag = #{gender}
            order by rand() limit #{count}
        ]]>
    </select>

    <select id="getSongs" resultType="int">
        <![CDATA[
            select song_id from playlist
        ]]>
    </select>

    <select id="getArtistAndSongName" resultType="map">
        <![CDATA[
            select artist, song_name from playlist where song_id = #{item_id}
        ]]>
    </select>

    <update id="updateAgeParameters" parameterType="map">
        <![CDATA[
            update playlist
            set prefer_${(age + 1) * 10} = prefer_${(age + 1) * 10} + #{rating}
            where song_id = #{item_id}
        ]]>
    </update>

    <update id="updateGenderParameters" parameterType="map">
        <![CDATA[
            update playlist
            set prefer_${gender} = prefer_${gender} + #{rating}
            where song_id = #{item_id}
        ]]>
    </update>

    <select id="getSongsOverAgePreferenceRange" resultType="map">
        <![CDATA[
            select song_id "item_id", prefer_10, prefer_20, prefer_30, prefer_40, prefer_50, prefer_60 from playlist
            where prefer_10 < 0 or prefer_20 < 0 or prefer_30 < 0 or prefer_40 < 0 or prefer_50 < 0 or prefer_60 < 0
               or prefer_10 > 100 or prefer_20 > 100 or prefer_30 > 100 or prefer_40 > 100 or prefer_50 > 100 or prefer_60 > 100
        ]]>
    </select>

    <select id="getSongsOverGenderPreferenceRange" resultType="map">
        <![CDATA[
            select song_id "item_id", prefer_female, prefer_male from playlist
            where prefer_male < 0 or prefer_female < 0 or prefer_male > 100 or prefer_female > 100
        ]]>
    </select>

    <update id="resetAgePreferenceDistribution" parameterType="map">
        <![CDATA[
            update playlist
            set prefer_10 = #{prefer_10},
                prefer_20 = #{prefer_20},
                prefer_30 = #{prefer_30},
                prefer_40 = #{prefer_40},
                prefer_50 = #{prefer_50},
                prefer_60 = #{prefer_60}
            where song_id = #{item_id}
        ]]>
    </update>

    <update id="resetGenderPreferenceDistribution" parameterType="map">
        <![CDATA[
            update playlist
            set prefer_female = #{prefer_female},
                prefer_male = #{prefer_male}
            where song_id = #{item_id}
        ]]>
    </update>

    <select id="getAgePreferenceDistribution" resultType="map">
        <![CDATA[
            select prefer_10, prefer_20, prefer_30, prefer_40, prefer_50, prefer_60
            from playlist where song_id = #{item_id}
        ]]>
    </select>

    <select id="getGenderPreferenceDistribution" resultType="map">
        <![CDATA[
            select prefer_male, prefer_female
            from playlist where song_id = #{item_id}
        ]]>
    </select>

    <update id="setAgeMaxPreferenceFlag" parameterType="map">
        <![CDATA[
            update playlist set prefer_age_flag = #{flag}
            where song_id = #{item_id}
        ]]>
    </update>

    <update id="setGenderMaxPreferenceFlag" parameterType="map">
        <![CDATA[
            update playlist set prefer_gender_flag = #{flag}
            where song_id = #{item_id}
        ]]>
    </update>

    <delete id="deleteCurrentPlaylistAll">
        <![CDATA[
            delete from current_playlist
        ]]>
    </delete>

    <delete id="deleteCurrentPlaylist" parameterType="string">
        <![CDATA[
            delete from current_playlist where store_id = #{store_id}
        ]]>
    </delete>

    <insert id="insertCurrentSong" parameterType="map">
        <![CDATA[
            insert into current_playlist values (#{song_id}, #{store_id})
        ]]>
    </insert>
</mapper>